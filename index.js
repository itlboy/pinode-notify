const logger = require('./logger');
const { checkPorts } = require('./portChecker'); // Import module
const axios = require('axios');
require('dotenv').config();

const PORTS_TO_CHECK = Array.from({ length: 3 }, (_, i) => 31401 + i);
const DISCORD_WEBHOOK_URL = process.env.DISCORD_WEBHOOK_URL;

if (!DISCORD_WEBHOOK_URL) {
    console.error('‚ùå DISCORD_WEBHOOK_URL is not set in .env file');
    process.exit(1);
}

let previousPortStatus = {};
let retrying = false; // üõ† ƒê√°nh d·∫•u tr·∫°ng th√°i th·ª≠ l·∫°i khi c√≥ l·ªói

// ‚úÖ H√†m l·∫•y IP Public
async function getPublicIP() {
    try {
        const publicIpModule = await import('public-ip');
        return await publicIpModule.publicIpv4();
    } catch (error) {
        logger.error('‚ùå Failed to retrieve public IP:', error);
        return 'Unknown';
    }
}

// ‚úÖ H√†m g·ª≠i th√¥ng b√°o l√™n Discord
async function sendDiscordAlert(message) {
    try {
        await axios.post(DISCORD_WEBHOOK_URL, { content: message });
        logger.info("‚úÖ Notification sent to Discord.");
    } catch (error) {
        logger.error('‚ùå Failed to send Discord alert:', error);
    }
}

// ‚úÖ H√†m ki·ªÉm tra tr·∫°ng th√°i port & g·ª≠i notify n·∫øu thay ƒë·ªïi
async function monitor() {
    const ip = await getPublicIP();
    logger.info(`üåê Public IP: ${ip}`);

    try {
        const currentPortStatus = await checkPorts(ip, PORTS_TO_CHECK);
        let logMessage = `üåê **Public IP:** ${ip}\n`;
        let statusChanged = false;
        let hasError = false;

        for (const port of PORTS_TO_CHECK) {
            const portState = currentPortStatus[port] ? 'üü¢ OK' : 'üî¥ Error';
            logMessage += `üîπ **Port ${port}:** ${portState}\n`;

            if (!currentPortStatus[port]) {
                hasError = true; // ‚úÖ C√≥ l·ªói k·∫øt n·ªëi
            }

            if (previousPortStatus[port] !== undefined && previousPortStatus[port] !== currentPortStatus[port]) {
                statusChanged = true;
            }
        }

        // Log to console
        logger.info(logMessage);

        // ‚úÖ N·∫øu c√≥ l·ªói, th·ª≠ l·∫°i sau 1 ph√∫t tr∆∞·ªõc khi g·ª≠i notify
        if (hasError && !retrying) {
            retrying = true;
            logger.warn("‚ö†Ô∏è Connection error detected. Retrying in 1 minute...");
            setTimeout(async () => {
                await monitor(); // ‚úÖ Th·ª≠ l·∫°i sau 1 ph√∫t
                retrying = false;
            }, 60 * 1000);
            return;
        }

        // ‚úÖ G·ª≠i notify l√™n Discord n·∫øu c√≥ thay ƒë·ªïi ho·∫∑c n·∫øu v·∫´n l·ªói sau retry
        if (Object.keys(previousPortStatus).length === 0 || statusChanged || hasError) {
            await sendDiscordAlert(`‚ö†Ô∏è *PiNode Monitoring Update*\n${logMessage}`);
        }

        // ‚úÖ C·∫≠p nh·∫≠t tr·∫°ng th√°i port ƒë·ªÉ so s√°nh l·∫ßn sau
        previousPortStatus = { ...currentPortStatus };
    } catch (error) {
        logger.error("‚ùå Error during monitoring:", error);
    }
}

// ‚úÖ Ch·∫°y ki·ªÉm tra ngay khi ·ª©ng d·ª•ng m·ªü, sau ƒë√≥ ki·ªÉm tra l·∫°i m·ªói 5 ph√∫t
setInterval(monitor, 5 * 60 * 1000);
monitor();
